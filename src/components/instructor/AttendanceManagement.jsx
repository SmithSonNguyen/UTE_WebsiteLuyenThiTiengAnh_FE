import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import { getInstructorClasses } from "../../api/instructorApi";
import {
  getClassStudents,
  getAttendanceByDate,
  saveAttendance,
} from "../../api/attendanceApi";

const AttendanceManagement = () => {
  const [selectedClass, setSelectedClass] = useState("");
  const [selectedDate, setSelectedDate] = useState(
    new Date().toISOString().split("T")[0]
  );
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [classes, setClasses] = useState([]);
  const [scheduleError, setScheduleError] = useState(""); // Th√™m state cho l·ªói schedule
  const [classInfo, setClassInfo] = useState(null); // Th√™m state cho th√¥ng tin l·ªõp

  // Fetch classes from API
  useEffect(() => {
    fetchClasses();
  }, []);

  const fetchClasses = async () => {
    try {
      const response = await getInstructorClasses();
      const classesData = response.result || [];
      setClasses(
        classesData.map((cls) => ({
          id: cls._id,
          name: `${cls.courseId.title} - ${cls.classCode}`,
          code: cls.classCode,
        }))
      );
    } catch (error) {
      console.error("Error fetching classes:", error);
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªõp h·ªçc");
    }
  };

  const loadStudents = async () => {
    if (!selectedClass) return;

    setLoading(true);
    setScheduleError(""); // Reset l·ªói schedule

    try {
      // L·∫•y danh s√°ch sinh vi√™n trong l·ªõp
      const studentsData = await getClassStudents(selectedClass);
      setClassInfo(studentsData.classInfo); // L∆∞u th√¥ng tin l·ªõp

      // L·∫•y ƒëi·ªÉm danh hi·ªán t·∫°i cho ng√†y ƒë√£ ch·ªçn
      let attendanceData = null;
      try {
        attendanceData = await getAttendanceByDate(selectedClass, selectedDate);
      } catch (error) {
        // X·ª≠ l√Ω error message ƒë√∫ng c√°ch
        let errorMessage = "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra l·ªãch h·ªçc";
        if (error?.error) {
          // ‚úÖ L·∫•y error field chi ti·∫øt
          errorMessage = error.error;
        } else if (error?.message) {
          // ‚úÖ Fallback v·ªõi message
          errorMessage = error.message;
        } else if (typeof error === "string") {
          errorMessage = error;
        }

        setScheduleError(errorMessage);
        setStudents([]); // Clear students khi c√≥ l·ªói schedule
        return;

        // N·∫øu ch∆∞a c√≥ ƒëi·ªÉm danh cho ng√†y n√†y, t·∫°o m·ªõi
      }

      // Mapping students v·ªõi th√¥ng tin ƒëi·ªÉm danh (n·∫øu c√≥)
      const studentsWithAttendance = studentsData.students.map((student) => {
        const attendanceRecord = attendanceData?.records.find(
          (record) => record.studentId === student._id
        );

        return {
          id: student._id,
          studentId: student._id,
          name: student.name,
          email: student.email,
          phone: student.phone,
          isPresent: attendanceRecord?.isPresent || false,
          note: attendanceRecord?.note || "",
        };
      });

      setStudents(studentsWithAttendance);
    } catch (error) {
      console.error("Error loading students:", error);
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch sinh vi√™n");
      }
    } finally {
      setLoading(false);
    }
  };

  // Load students when class or date changes
  useEffect(() => {
    if (selectedClass) {
      loadStudents();
    } else {
      setStudents([]);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedClass, selectedDate]);

  const handleClassChange = (classId) => {
    setSelectedClass(classId);
  };

  const handleAttendanceChange = (studentId, isPresent) => {
    setStudents((prev) =>
      prev.map((student) =>
        student.id === studentId ? { ...student, isPresent } : student
      )
    );
  };

  const handleNoteChange = (studentId, note) => {
    setStudents((prev) =>
      prev.map((student) =>
        student.id === studentId ? { ...student, note } : student
      )
    );
  };

  const handleMarkAllPresent = () => {
    setStudents((prev) =>
      prev.map((student) => ({ ...student, isPresent: true }))
    );
  };

  const handleMarkAllAbsent = () => {
    setStudents((prev) =>
      prev.map((student) => ({ ...student, isPresent: false }))
    );
  };

  const handleSaveAttendance = async () => {
    if (!selectedClass || students.length === 0) {
      toast.error("Vui l√≤ng ch·ªçn l·ªõp v√† c√≥ sinh vi√™n ƒë·ªÉ ƒëi·ªÉm danh");
      return;
    }

    if (scheduleError) {
      toast.error("Kh√¥ng th·ªÉ l∆∞u ƒëi·ªÉm danh khi c√≥ l·ªói l·ªãch h·ªçc");
      return;
    }

    try {
      const attendanceData = {
        date: selectedDate,
        students: students.map((student) => ({
          studentId: student.studentId,
          isPresent: student.isPresent,
          note: student.note,
        })),
      };

      await saveAttendance(selectedClass, attendanceData);
      toast.success("ƒêi·ªÉm danh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
    } catch (error) {
      console.error("Error saving attendance:", error);
      if (error.response?.data?.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error("Kh√¥ng th·ªÉ l∆∞u ƒëi·ªÉm danh. Vui l√≤ng th·ª≠ l·∫°i!");
      }
    }
  };

  const presentCount = students.filter((s) => s.isPresent).length;
  const absentCount = students.length - presentCount;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold text-gray-900">
          Qu·∫£n l√Ω ƒëi·ªÉm danh
        </h2>
        <div className="text-sm text-gray-500">
          {new Date(selectedDate).toLocaleDateString("vi-VN", {
            weekday: "long",
            year: "numeric",
            month: "long",
            day: "numeric",
          })}
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Ch·ªçn l·ªõp h·ªçc
            </label>
            <select
              value={selectedClass}
              onChange={(e) => handleClassChange(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">-- Ch·ªçn l·ªõp h·ªçc --</option>
              {classes.map((cls) => (
                <option key={cls.id} value={cls.id}>
                  {cls.name} ({cls.code})
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Ng√†y ƒëi·ªÉm danh
            </label>
            <input
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          {students.length > 0 && (
            <div className="flex items-end gap-2">
              <button
                onClick={handleMarkAllPresent}
                className="flex-1 bg-green-600 text-white px-3 py-3 rounded-md text-sm hover:bg-green-700 transition-colors"
              >
                C√≥ m·∫∑t t·∫•t c·∫£
              </button>
              <button
                onClick={handleMarkAllAbsent}
                className="flex-1 bg-red-600 text-white px-3 py-3 rounded-md text-sm hover:bg-red-700 transition-colors"
              >
                V·∫Øng t·∫•t c·∫£
              </button>
            </div>
          )}
        </div>

        {/* Class Schedule Info */}
        {classInfo && (
          <div className="mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <h4 className="text-sm font-medium text-blue-900 mb-2">
              üìÖ Th√¥ng tin l·ªãch h·ªçc
            </h4>
            <div className="text-sm text-blue-800">
              <span className="font-medium">L·ªõp:</span> {classInfo.classCode} -{" "}
              {classInfo.courseTitle}
            </div>
          </div>
        )}

        {/* Schedule Error Warning */}
        {scheduleError && (
          <div className="mt-4 p-4 bg-red-50 rounded-lg border border-red-200">
            <div className="flex items-start">
              <div className="flex-shrink-0">
                <span className="text-red-600">‚ö†Ô∏è</span>
              </div>
              <div className="ml-3">
                <h4 className="text-sm font-medium text-red-900">
                  Kh√¥ng th·ªÉ ƒëi·ªÉm danh
                </h4>
                <p className="text-sm text-red-800 mt-1">
                  {typeof scheduleError === "string"
                    ? scheduleError
                    : "C√≥ l·ªói x·∫£y ra v·ªõi l·ªãch h·ªçc"}
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Stats */}
      {students.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-blue-600 font-semibold">üë•</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">
                  T·ªïng sinh vi√™n
                </p>
                <p className="text-2xl font-semibold text-gray-900">
                  {students.length}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-green-600 font-semibold">‚úÖ</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">C√≥ m·∫∑t</p>
                <p className="text-2xl font-semibold text-green-600">
                  {presentCount}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white p-4 rounded-lg shadow-md border border-gray-200">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                  <span className="text-red-600 font-semibold">‚ùå</span>
                </div>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">V·∫Øng m·∫∑t</p>
                <p className="text-2xl font-semibold text-red-600">
                  {absentCount}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Student List */}
      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
        </div>
      ) : students.length > 0 ? (
        <div className="bg-white rounded-lg shadow-md border border-gray-200">
          <div className="p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">
                Danh s√°ch sinh vi√™n
              </h3>
              <button
                onClick={handleSaveAttendance}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                üíæ L∆∞u ƒëi·ªÉm danh
              </button>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b border-gray-200">
                    <th className="text-left py-3 px-4 font-medium text-gray-900">
                      STT
                    </th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">
                      M√£ SV
                    </th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">
                      H·ªç v√† t√™n
                    </th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">
                      Email
                    </th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">
                      S·ªë ƒëi·ªán tho·∫°i
                    </th>
                    <th className="text-center py-3 px-4 font-medium text-gray-900">
                      Tr·∫°ng th√°i
                    </th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">
                      Ghi ch√∫
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {students.map((student, index) => (
                    <tr
                      key={student.id}
                      className="border-b border-gray-100 hover:bg-gray-50"
                    >
                      <td className="py-3 px-4 text-sm text-gray-900">
                        {index + 1}
                      </td>
                      <td className="py-3 px-4 text-sm text-gray-900 font-medium">
                        {student.studentId}
                      </td>
                      <td className="py-3 px-4 text-sm text-gray-900">
                        {student.name}
                      </td>
                      <td className="py-3 px-4 text-sm text-gray-500">
                        {student.email}
                      </td>
                      <td className="py-3 px-4 text-sm text-gray-500">
                        {student.phone}
                      </td>
                      <td className="py-3 px-4 text-center">
                        <div className="flex justify-center gap-2">
                          <button
                            onClick={() =>
                              handleAttendanceChange(student.id, true)
                            }
                            className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
                              student.isPresent
                                ? "bg-green-100 text-green-800 border-2 border-green-300"
                                : "bg-gray-100 text-gray-700 hover:bg-green-50"
                            }`}
                          >
                            ‚úÖ C√≥ m·∫∑t
                          </button>
                          <button
                            onClick={() =>
                              handleAttendanceChange(student.id, false)
                            }
                            className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
                              !student.isPresent
                                ? "bg-red-100 text-red-800 border-2 border-red-300"
                                : "bg-gray-100 text-gray-700 hover:bg-red-50"
                            }`}
                          >
                            ‚ùå V·∫Øng
                          </button>
                        </div>
                      </td>
                      <td className="py-3 px-4">
                        <input
                          type="text"
                          value={student.note}
                          onChange={(e) =>
                            handleNoteChange(student.id, e.target.value)
                          }
                          placeholder="Ghi ch√∫..."
                          className="w-full p-2 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                        />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      ) : selectedClass && scheduleError ? (
        <div className="text-center py-12">
          <div className="text-red-500">
            <div className="text-4xl mb-4">üìÖ</div>
            <div className="text-lg font-medium mb-2">Kh√¥ng th·ªÉ ƒëi·ªÉm danh</div>
            <div className="text-sm text-gray-600 max-w-md mx-auto">
              Ng√†y ƒë∆∞·ª£c ch·ªçn kh√¥ng n·∫±m trong l·ªãch h·ªçc c·ªßa l·ªõp. Vui l√≤ng ch·ªçn
              ng√†y kh√°c.
            </div>
          </div>
        </div>
      ) : selectedClass ? (
        <div className="text-center py-12">
          <div className="text-gray-500">
            <div className="text-4xl mb-4">üë•</div>
            <div className="text-lg font-medium mb-2">Kh√¥ng c√≥ sinh vi√™n</div>
            <div className="text-sm">
              Kh√¥ng c√≥ sinh vi√™n n√†o trong l·ªõp n√†y ho·∫∑c ch∆∞a c√≥ sinh vi√™n ƒëƒÉng
              k√Ω.
            </div>
          </div>
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="text-gray-500">
            <div className="text-4xl mb-4">üéì</div>
            <div className="text-lg font-medium mb-2">Ch·ªçn l·ªõp h·ªçc</div>
            <div className="text-sm">
              Vui l√≤ng ch·ªçn l·ªõp h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒëi·ªÉm danh
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AttendanceManagement;
